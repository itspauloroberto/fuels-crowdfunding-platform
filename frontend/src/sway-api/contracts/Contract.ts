/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.101.1
  Forc version: 0.69.1
  Fuel-Core version: 0.45.1
*/

import { Contract as __Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  Address,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type CampaignInput = { id: BigNumberish, asset_id: Option<string>, owner: IdentityInput, target_goal: BigNumberish, deadline: BigNumberish, total_raised: BigNumberish };
export type CampaignOutput = { id: BN, asset_id: Option<string>, owner: IdentityOutput, target_goal: BN, deadline: BN, total_raised: BN };
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

const abi = {
  "programType": "contract",
  "specVersion": "1.1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "enum std::option::Option<struct std::address::Address>",
      "concreteTypeId": "8f44be37f59226eedaa8ba576d6674575f420f34a03f5d452cb9886ef9d38214",
      "metadataTypeId": 3,
      "typeArguments": [
        "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
      ]
    },
    {
      "type": "struct Campaign",
      "concreteTypeId": "90fb85ffe45316e79ed94349a5cdda52c44838216b06af30b10291d8491a5fa4",
      "metadataTypeId": 5
    },
    {
      "type": "struct std::address::Address",
      "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308",
      "metadataTypeId": 6
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "()",
      "metadataTypeId": 0
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "Address",
          "typeId": 6
        },
        {
          "name": "ContractId",
          "typeId": 7
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "None",
          "typeId": 0
        },
        {
          "name": "Some",
          "typeId": 4
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 4
    },
    {
      "type": "struct Campaign",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "id",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_id",
          "typeId": 3,
          "typeArguments": [
            {
              "name": "",
              "typeId": 1
            }
          ]
        },
        {
          "name": "owner",
          "typeId": 2
        },
        {
          "name": "target_goal",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "deadline",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "total_raised",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "create_campaign",
      "inputs": [
        {
          "name": "target_goal",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "deadline",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "name": "get_campaign",
      "inputs": [
        {
          "name": "id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "output": "90fb85ffe45316e79ed94349a5cdda52c44838216b06af30b10291d8491a5fa4",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "name": "get_campaign_count",
      "inputs": [],
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "name": "get_campaign_owner_addr",
      "inputs": [
        {
          "name": "id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "output": "8f44be37f59226eedaa8ba576d6674575f420f34a03f5d452cb9886ef9d38214",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "name": "get_next_id",
      "inputs": [],
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [],
  "errorCodes": {}
};

const storageSlots: StorageSlot[] = [
  {
    "key": "177bd5eccb2bc5e88d5d45f772fac5df69c5173e10d69d13c6469b3692687292",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "c34ccefe6ef382f416b15617c811c4effec9363f39f7d6d8135dd9edbfcafc5b",
    "value": "0000000000000001000000000000000000000000000000000000000000000000"
  }
];

export class ContractInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    create_campaign: FunctionFragment;
    get_campaign: FunctionFragment;
    get_campaign_count: FunctionFragment;
    get_campaign_owner_addr: FunctionFragment;
    get_next_id: FunctionFragment;
  };
}

export class Contract extends __Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: ContractInterface;
  declare functions: {
    create_campaign: InvokeFunction<[target_goal: BigNumberish, deadline: BigNumberish], BN>;
    get_campaign: InvokeFunction<[id: BigNumberish], CampaignOutput>;
    get_campaign_count: InvokeFunction<[], BN>;
    get_campaign_owner_addr: InvokeFunction<[id: BigNumberish], Option<AddressOutput>>;
    get_next_id: InvokeFunction<[], BN>;
  };

  constructor(
    id: string | Address,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
